name: Run tests [snowpark_checkpoints_validators]

on:
  workflow_call:

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: Test ${{ matrix.download_name }}-${{ matrix.python-version }}-${{ matrix.cloud-provider }}
    runs-on: ${{ matrix.os }}
    env:
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_AUTHENTICATOR: SNOWFLAKE_JWT
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_WAREHOUSE: ${{ secrets.SNOWFLAKE_WH }}
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_PRIVATE_KEY_RAW: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_RAW }}
      SNOWPARK_CHECKPOINTS_TELEMETRY_TESTING: "true"

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.10"
            cloud-provider: aws
            snow_cli_version: "3.2.2"
            download_name: linux
          - os: ubuntu-latest
            python-version: "3.11"
            cloud-provider: aws
            snow_cli_version: "3.2.2"
            download_name: linux
          - os: windows-latest
            python-version: "3.10"
            cloud-provider: aws
            snow_cli_version: "3.2.2"
            download_name: windows

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Java
        uses: actions/setup-java@v4.5.0
        with:
          distribution: "temurin"
          java-version: "21"
          check-latest: true
      - run: java --version

      - name: Generate timestamp Linux
        if: runner.os == 'Linux'
        run: |
          echo "timestamp=$(date +%Y%m%d%H%M%S%3N)" >> $GITHUB_ENV

      - name: Generate timestamp Windows
        if: runner.os == 'Windows'
        shell: pwsh
        id: timestamp
        run: |
          $timestamp = Get-Date -Format yyyyMMddHHmmssfff
          $schemaId = "${{ secrets.SNOWFLAKE_SCHEMA }}_${{ github.run_id }}_${{ github.run_number }}_$timestamp"
          Add-Content -Path $Env:GITHUB_ENV -Value "SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID_WIN=$schemaId"

      - name: Set Snowflake Schema ID
        run: |
          echo "SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID=${{ secrets.SNOWFLAKE_SCHEMA }}_${{ github.run_id }}_${{ github.run_number }}_${{ env.timestamp }}" >> $GITHUB_ENV

      - name: Display Python version
        run: |
          python -c "import sys; print(sys.version)"
          python ../.github/scripts/py_show_env.py
        shell: bash
        working-directory: ./snowpark-checkpoints-validators

      - name: Set up Snowflake CLI
        uses: Snowflake-Labs/snowflake-cli-action@a0d3f3a90914a6a91e6537cc6fde98ebe27e17be
        with:
          cli-version: ${{ matrix.snow_cli_version }}
          default-config-file-path: ".github/config/config.toml"

      - name: Set up key (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          PARENT_DIR=$(dirname "${{ github.workspace }}")
          PRIVATE_KEY_FILE=$PARENT_DIR/.ssh/key.p8
          echo "PARENT_DIR=$PARENT_DIR" >> $GITHUB_ENV
          echo "PRIVATE_KEY_FILE=$PRIVATE_KEY_FILE" >> $GITHUB_ENV

          mkdir -v $PARENT_DIR/.ssh && ls -la $PARENT_DIR && pwd
          echo "${SNOWFLAKE_CONNECTIONS_MYCONNECTION_PRIVATE_KEY_RAW}" > $PRIVATE_KEY_FILE
          sudo chmod 600 $PRIVATE_KEY_FILE
          file $PRIVATE_KEY_FILE && ls -la $PRIVATE_KEY_FILE

      - name: Set up Connection Snowflake CLI (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          PARENT_DIR=$(dirname "${{ github.workspace }}")
          PRIVATE_KEY_FILE=$PARENT_DIR/.ssh/key.p8
          CONFIG_FILE=".github/config/config.toml"
          SNOWFLAKE_CONFIG_DIR="/home/runner/.snowflake"
          SNOWFLAKE_CONFIG_PATH="$SNOWFLAKE_CONFIG_DIR/config.toml"

          if [ ! -d "$SNOWFLAKE_CONFIG_DIR" ]; then
            mkdir -p "$SNOWFLAKE_CONFIG_DIR"
          else
            echo "Snowflake Configuration directory already exists: $SNOWFLAKE_CONFIG_DIR"
          fi

          echo "[connections.myconnection]" > "$CONFIG_FILE"
          echo "authenticator = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_AUTHENTICATOR\"" >> "$CONFIG_FILE"
          echo "schema = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA\"" >> "$CONFIG_FILE"
          echo "account = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_ACCOUNT\"" >> "$CONFIG_FILE"
          echo "user = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_USER\"" >> "$CONFIG_FILE"
          echo "database = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE\"" >> "$CONFIG_FILE"
          echo "warehouse = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_WAREHOUSE\"" >> "$CONFIG_FILE"
          echo "role = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_ROLE\"" >> "$CONFIG_FILE"
          echo "private_key_file = \"$PRIVATE_KEY_FILE\"" >> "$CONFIG_FILE"

          echo "[connections.integration]" >> "$CONFIG_FILE"
          echo "authenticator = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_AUTHENTICATOR\"" >> "$CONFIG_FILE"
          echo "schema = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID\"" >> "$CONFIG_FILE"
          echo "account = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_ACCOUNT\"" >> "$CONFIG_FILE"
          echo "user = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_USER\"" >> "$CONFIG_FILE"
          echo "database = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE\"" >> "$CONFIG_FILE"
          echo "warehouse = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_WAREHOUSE\"" >> "$CONFIG_FILE"
          echo "role = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_ROLE\"" >> "$CONFIG_FILE"
          echo "private_key_file = \"$PRIVATE_KEY_FILE\"" >> "$CONFIG_FILE"

          cp "$CONFIG_FILE" "$SNOWFLAKE_CONFIG_PATH"
          chmod 600 "$PRIVATE_KEY_FILE"
          chmod 600 "$SNOWFLAKE_CONFIG_PATH"

          echo "Snowflake configuration at $SNOWFLAKE_CONFIG_PATH:"
          cat "$SNOWFLAKE_CONFIG_PATH"
        env:
          SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID: ${{ env.SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID }}

      - name: Set up key (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ParentDir = Split-Path -Parent ${{ github.workspace }}
          $PrivateKeyFile = Join-Path $ParentDir '.ssh\key.p8'

          New-Item -ItemType Directory -Force -Path "$ParentDir\.ssh" | Out-Null
          Set-Content -Path $PrivateKeyFile -Value $Env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_PRIVATE_KEY_RAW
          Write-Host "Private key file created at: $PrivateKeyFile"

          icacls $PrivateKeyFile /inheritance:r /grant:r "$($Env:USERNAME):(R,W)"
          icacls $PrivateKeyFile /grant:r *S-1-5-32-544:RW

      - name: Set up Connection Snowflake CLI (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $PARENT_DIR = Split-Path -Parent "${{ github.workspace }}"
          $PRIVATE_KEY_FILE = (Join-Path (Join-Path $PARENT_DIR '.ssh') 'key.p8') -replace '\\', '\\\\'
          $CONFIG_FILE=".github\config\config.toml"
          $SNOWFLAKE_CONFIG_DIR = "$env:USERPROFILE\.snowflake"
          $SNOWFLAKE_CONFIG_PATH = "$SNOWFLAKE_CONFIG_DIR\config.toml"

          Write-Output "SNOWFLAKE_CONFIG_DIR:  $SNOWFLAKE_CONFIG_DIR"
          Write-Output "SNOWFLAKE_CONFIG_PATH: $SNOWFLAKE_CONFIG_PATH"

          New-Item -ItemType Directory -Force -Path $SNOWFLAKE_CONFIG_DIR

          Set-Content -Path $CONFIG_FILE -Value "[connections.myconnection]"
          Add-Content -Path $CONFIG_FILE -Value "authenticator = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_AUTHENTICATOR`""
          Add-Content -Path $CONFIG_FILE -Value "schema = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA`""
          Add-Content -Path $CONFIG_FILE -Value "account = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_ACCOUNT`""
          Add-Content -Path $CONFIG_FILE -Value "user = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_USER`""
          Add-Content -Path $CONFIG_FILE -Value "database = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE`""
          Add-Content -Path $CONFIG_FILE -Value "warehouse = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_WAREHOUSE`""
          Add-Content -Path $CONFIG_FILE -Value "role = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_ROLE`""
          Add-Content -Path $CONFIG_FILE -Value "private_key_file = `"$PRIVATE_KEY_FILE`""

          Add-Content -Path $CONFIG_FILE -Value "[connections.integration]"
          Add-Content -Path $CONFIG_FILE -Value "authenticator = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_AUTHENTICATOR`""
          Add-Content -Path $CONFIG_FILE -Value "schema = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID_WIN`""
          Add-Content -Path $CONFIG_FILE -Value "account = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_ACCOUNT`""
          Add-Content -Path $CONFIG_FILE -Value "user = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_USER`""
          Add-Content -Path $CONFIG_FILE -Value "database = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE`""
          Add-Content -Path $CONFIG_FILE -Value "warehouse = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_WAREHOUSE`""
          Add-Content -Path $CONFIG_FILE -Value "role = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_ROLE`""
          Add-Content -Path $CONFIG_FILE -Value "private_key_file = `"$PRIVATE_KEY_FILE`""

          Copy-Item -Path $CONFIG_FILE -Destination $SNOWFLAKE_CONFIG_PATH
          icacls $PRIVATE_KEY_FILE /inheritance:r /grant:r "$($env:USERNAME):(R)"
          icacls $SNOWFLAKE_CONFIG_PATH /inheritance:r /grant:r "$($env:USERNAME):(R)"

          Write-Output "Snowflake configuration at $SNOWFLAKE_CONFIG_PATH"
          Get-Content $SNOWFLAKE_CONFIG_PATH
        env:
          SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID_WIN: ${{ env.SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID_WIN }}

      - name: Set up Default Snowflake CLI (linux)
        if: runner.os == 'Linux'
        run: |
          snow --info && snow --version
          snow connection test -c myconnection
          snow connection set-default myconnection
          snow sql -q " Select current_organization_name(); SELECT CURRENT_DATABASE(), CURRENT_SCHEMA();" -c myconnection
          snow connection list

          snow sql -q " CREATE SCHEMA IF NOT EXISTS ${DATABASE}.${SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID} WITH MANAGED ACCESS; " -c myconnection
          snow connection test -c integration
          snow connection set-default integration
          snow connection list
        env:
          DATABASE: "${{ env.SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE }}"
          SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID: ${{ env.SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID }}

      - name: Set up Default Snowflake CLI (windows)
        if: runner.os == 'windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          snow --info
          snow --version
          snow connection test -c myconnection
          snow connection set-default myconnection
          snow sql -q "Select current_organization_name(); SELECT CURRENT_DATABASE(), CURRENT_SCHEMA();" -c myconnection
          snow connection list

          $database = $env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE
          $schemaId = $env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID_WIN

          Write-Output "Database: $database"
          Write-Output "Schema ID: $schemaId"
          $query = "CREATE SCHEMA IF NOT EXISTS $database.`"$schemaId`" WITH MANAGED ACCESS;"

          Write-Output "Executing query: $query"
          snow sql -q $query -c myconnection

          snow connection test -c integration
          snow connection set-default integration
          snow connection list
        env:
          SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE: "${{ env.SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE }}"
          SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID_WIN: "${{ env.SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID_WIN }}"

      - name: Install required tools
        run: |
          python -m pip install --upgrade pip -q
          python -m pip install ".[development]"
          pip install hatch pyyaml frictionless requests -q
          pip list
        shell: bash
        working-directory: ./snowpark-checkpoints-validators

      - name: Display Host Info
        run: |
          python ../.github/scripts/py_show_host.py
        shell: bash
        working-directory: ./snowpark-checkpoints-validators

      - name: Run Tests
        run: |
          echo "Current working directory: $PWD"
          hatch config set dirs.env.virtual .hatch
          hatch status && hatch env show
          hatch run test:check
          hatch run test:coverage
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
          PYTEST_ADDOPTS: --color=yes --tb=short -v
        shell: bash
        working-directory: ./snowpark-checkpoints-validators

      - name: Snowflake Schema Cleanup (linux)
        if: always() && runner.os == 'Linux'
        shell: bash
        run: |
          if [ -n "${SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID}" ]; then
            snow sql -q "DROP SCHEMA IF EXISTS ${SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID} CASCADE;" -c myconnection
          fi
        env:
          SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID: ${{ env.SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID }}

      - name: Snowflake Schema Cleanup (windows)
        if: always() && runner.os == 'Windows'
        shell: pwsh
        run: |
          $schemaId = $env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID_WIN
          Write-Output "Schema ID: $schemaId"
          if (-not [string]::IsNullOrWhiteSpace($schemaId)) {
            snow sql -q "DROP SCHEMA IF EXISTS `"$schemaId`" CASCADE;" -c myconnection
          }
        env:
          SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID_WIN: ${{ env.SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID_WIN }}
