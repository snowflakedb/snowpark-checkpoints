name: PR Lint

on:
  pull_request_target:
    types: [edited, opened, reopened, synchronize]
  pull_request:
    types: [ready_for_review]
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  pr-lint:
    if: ${{ github.event.pull_request.user.login != 'dependabot[bot]' }}
    runs-on: ubuntu-latest

    env:
      PR_FILES_THRESHOLD: ${{ secrets.PR_FILES_THRESHOLD}}

    steps:
      - name: Check if PR is created by github-actions[bot]
        id: check_bot
        run: |
          if [[ "${{ github.event.pull_request.user.login }}" == "github-actions[bot]" ]]; then
            echo "WARNING: PR created by github-actions[bot]. Bypassing PR lint rules."
            echo "bot_created=true" >> $GITHUB_OUTPUT
          else
            echo "bot_created=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository
        if: steps.check_bot.outputs.bot_created != 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR Title
        if: steps.check_bot.outputs.bot_created != 'true'
        uses: morrisoncole/pr-lint-action@51f3cfabaf5d46f94e54524214e45685f0401b2a
        with:
          title-regex: "^[a-zA-Z]+-[0-9]+"
          on-failed-regex-fail-action: true
          on-failed-regex-request-changes: false
          on-failed-regex-create-review: false
          on-failed-regex-comment: "Please prefix your PR title with a JIRA ticket number. e.g SNOW-123456: <Title>"
          repo-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Check PR Description
        if: steps.check_bot.outputs.bot_created != 'true'
        run: |
          if [ -z "$PR_BODY" ]; then
            echo "PR description is empty. Please provide a description."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_BODY: ${{ github.event.pull_request.body }}

      - name: Validate Risk Assessment Checkbox
        if: steps.check_bot.outputs.bot_created != 'true'
        run: |
          if echo "$PR_BODY" | grep -q '^- \[ \] I attest that this change meets the bar for low risk'; then
              echo "The checkbox is unchecked. Failing the step."
              exit 1
          fi

          if ! echo "$PR_BODY" | grep -q '^- \[[xX]\] I attest that this change meets the bar for low risk'; then
              echo "The required checked checkbox is missing. Failing the step."
              exit 1
          fi

          echo "Risk assessment checkbox validation passed."
        env:
          PR_BODY: ${{ github.event.pull_request.body }}

      - name: Validate JIRA URL ticket in PR Description
        if: steps.check_bot.outputs.bot_created != 'true'
        run: |
          MOTIVATION_SECTION=$(echo "$PR_BODY" | sed -n '/### Motivation & Context/,/### Description/p')
          if echo "$MOTIVATION_SECTION" | grep -Eq 'https?://[a-zA-Z0-9./?=_%:-]+'; then
            echo "URL found in the Motivation & Context section. Validation passed."
          else
            echo "JIRA link not found. Please add the ticket link to proceed. e.g [SNOW-01110011](https://snowflakecomputing.atlassian.net/browse/SNOW-01110011)"
            exit 1
          fi
        env:
          PR_BODY: ${{ github.event.pull_request.body }}

      - name: Check PR Size
        if: steps.check_bot.outputs.bot_created != 'true'
        run: |
          echo "Base SHA: ${{ github.event.pull_request.base.sha }}"
          echo "Head SHA: ${{ github.event.pull_request.head.sha }}"

          echo "Fetching diff between the base and head commits..."
          git fetch --no-tags --prune --depth=2 origin ${{ github.event.pull_request.base.ref }} || true

          CHANGED_PYFILES=$(git diff --name-only --diff-filter=d ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '\.py$' | grep -v '/test/' || true)
          echo "Changed Python files:" $CHANGED_PYFILES

          if [ -z "$CHANGED_PYFILES" ]; then
              echo "No Python files changed."
              FILE_COUNT=0
          else
              echo "Changed Python files: $CHANGED_PYFILES"
              FILE_COUNT=$(echo "$CHANGED_PYFILES" | wc -l)
          fi

          echo "Total Python files changed: $FILE_COUNT"

          if [ "$FILE_COUNT" -gt $PR_FILES_THRESHOLD ]; then
              echo "PR includes too many Python files ($FILE_COUNT > $PR_FILES_THRESHOLD). Please split it into smaller PRs."
              exit 1
          fi

          echo "PR size check passed successfully."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
