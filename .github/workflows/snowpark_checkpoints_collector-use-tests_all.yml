name: Run tests [snowpark_checkpoints_collector]

on:
  workflow_call:

jobs:
  test:
    name: Test ${{ matrix.download_name }}-${{ matrix.python-version }}-${{ matrix.cloud-provider }}
    runs-on: ${{ matrix.os }}
    env:
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_AUTHENTICATOR: SNOWFLAKE_JWT
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_WAREHOUSE: ${{ secrets.SNOWFLAKE_WH }}
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_PRIVATE_KEY_RAW: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_RAW }}
      HADOOP_HOME: "${{ github.workspace }}\\hadoop"

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.10"
            cloud-provider: aws
            snow_cli_version: "3.2.0"
            download_name: linux
          - os: ubuntu-latest
            python-version: "3.11"
            cloud-provider: aws
            snow_cli_version: "3.2.0"
            download_name: linux
          - os: windows-latest
            python-version: "3.9"
            cloud-provider: aws
            snow_cli_version: "2.8.2"
            download_name: windows

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"
          check-latest: true
      - run: java --version

      - name: Display Python version
        run: |
          python -c "import sys; print(sys.version)"
          python ../.github/scripts/py_show_env.py
        shell: bash
        working-directory: ./hypothesis-snowpark

      - name: Set up Snowflake CLI
        uses: Snowflake-Labs/snowflake-cli-action@main
        with:
          cli-version: ${{ matrix.snow_cli_version }}
          default-config-file-path: ".github/config/config.toml"

      - name: Set up key (Linux)
        if: runner.os == 'Linux'
        run: |
          PARENT_DIR=$(dirname "${{ github.workspace }}")
          PRIVATE_KEY_FILE=$PARENT_DIR/.ssh/key.p8
          echo "PARENT_DIR=$PARENT_DIR" >> $GITHUB_ENV
          echo "PRIVATE_KEY_FILE=$PRIVATE_KEY_FILE" >> $GITHUB_ENV

          mkdir -v $PARENT_DIR/.ssh && ls -la $PARENT_DIR && pwd
          echo "${SNOWFLAKE_CONNECTIONS_MYCONNECTION_PRIVATE_KEY_RAW}" > $PRIVATE_KEY_FILE
          sudo chmod 600 $PRIVATE_KEY_FILE
          file $PRIVATE_KEY_FILE && ls -la $PRIVATE_KEY_FILE

      - name: Set up Connection Snowflake CLI (Linux)
        if: runner.os == 'Linux'
        run: |
          PARENT_DIR=$(dirname "${{ github.workspace }}")
          PRIVATE_KEY_FILE=$PARENT_DIR/.ssh/key.p8
          CONFIG_FILE=".github/config/config.toml"
          SNOWFLAKE_CONFIG_DIR="/home/runner/.snowflake"
          SNOWFLAKE_CONFIG_PATH="$SNOWFLAKE_CONFIG_DIR/config.toml"

          mkdir -p "$SNOWFLAKE_CONFIG_DIR"

          echo "[connections.myconnection]" > "$CONFIG_FILE"
          echo "authenticator = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_AUTHENTICATOR\"" >> "$CONFIG_FILE"
          echo "schema = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA\"" >> "$CONFIG_FILE"
          echo "account = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_ACCOUNT\"" >> "$CONFIG_FILE"
          echo "user = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_USER\"" >> "$CONFIG_FILE"
          echo "database = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE\"" >> "$CONFIG_FILE"
          echo "warehouse = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_WAREHOUSE\"" >> "$CONFIG_FILE"
          echo "role = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_ROLE\"" >> "$CONFIG_FILE"
          echo "private_key_file = \"$PRIVATE_KEY_FILE\"" >> "$CONFIG_FILE"

          cp "$CONFIG_FILE" "$SNOWFLAKE_CONFIG_PATH"
          chmod 600 "$PRIVATE_KEY_FILE"
          chmod 600 "$SNOWFLAKE_CONFIG_PATH"

          echo "Snowflake configuration at $SNOWFLAKE_CONFIG_PATH:"
          cat "$SNOWFLAKE_CONFIG_PATH"
        shell: bash

      - name: Download Hadoop
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "Downloading Hadoop"
          Invoke-WebRequest -Uri "https://dlcdn.apache.org/hadoop/common/hadoop-3.3.6/hadoop-3.3.6.tar.gz" -OutFile "${{ github.workspace }}\\hadoop-3.3.6.tar.gz"
          tar -xvf "${{ github.workspace }}\\hadoop-3.3.6.tar.gz"
          Move-Item -Path "${{ github.workspace }}\\hadoop-3.3.6" -Destination "${{ github.workspace }}\\hadoop"

      - name: Download winutils.exe
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "Downloading winutils.exe"
          Invoke-WebRequest -Uri "https://github.com/steveloughran/winutils/raw/master/hadoop-3.3.6/bin/winutils.exe" -OutFile "${{ env.HADOOP_HOME }}\\bin\\winutils.exe"
          dir "${{ env.HADOOP_HOME }}\\bin"

      - name: Setup Hadoop Environment
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "## Configuring Hadoop Environment"
          echo "HADOOP_HOME=${{ env.HADOOP_HOME }}" >> $GITHUB_ENV
          echo "PATH=%PATH%;${{ env.HADOOP_HOME }}\\bin" >> $GITHUB_ENV

      - name: Validate HADOOP_HOME
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (!(Test-Path -Path "${{ env.HADOOP_HOME }}")) {
            Write-Error "HADOOP_HOME directory does not exist!"
          } else {
            echo "Listing contents of HADOOP_HOME"
            dir "${{ env.HADOOP_HOME }}"
          }

      - name: Set permissions for winutils
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          icacls "${{ env.HADOOP_HOME }}\\bin\\winutils.exe" /grant:r "$($env:USERNAME):(R)"

      - name: Verify Hadoop Installation
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          "${{ env.HADOOP_HOME }}\\bin\\winutils.exe" chmod 777 "${{ env.HADOOP_HOME }}\\tmp\\hadoop-${env:USERNAME}"
          dir "${{ env.HADOOP_HOME }}\\tmp"

      - name: Check and Start Hadoop Services
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "## Checking if Hadoop services are running"
          $namenode = Get-Process -Name "java" -ErrorAction SilentlyContinue | Where-Object { $_.Path -like "*hadoop*" -and $_.CommandLine -like "*namenode*" }

          if (-not $namenode) {
            Write-Output "Namenode is not running. Starting..."
            Start-Process -NoNewWindow -FilePath "cmd.exe" -ArgumentList "/C start /B $env:HADOOP_HOME\sbin\start-dfs.cmd"
          } else {
            Write-Output "Namenode is already running."
          }
          Write-Output "Hadoop services status check complete."

      - name: Set up key (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ParentDir = Split-Path -Parent ${{ github.workspace }}
          $PrivateKeyFile = Join-Path $ParentDir '.ssh\key.p8'

          New-Item -ItemType Directory -Force -Path "$ParentDir\.ssh" | Out-Null
          Set-Content -Path $PrivateKeyFile -Value $Env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_PRIVATE_KEY_RAW
          Write-Host "Private key file created at: $PrivateKeyFile"

          icacls $PrivateKeyFile /inheritance:r /grant:r "$($Env:USERNAME):(R,W)"
          icacls $PrivateKeyFile /grant:r *S-1-5-32-544:RW

      - name: Set up Connection Snowflake CLI (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $PARENT_DIR = Split-Path -Parent "${{ github.workspace }}"
          $PRIVATE_KEY_FILE = (Join-Path (Join-Path $PARENT_DIR '.ssh') 'key.p8') -replace '\\', '\\\\'
          $CONFIG_FILE=".github\config\config.toml"
          $SNOWFLAKE_CONFIG_DIR = "$env:USERPROFILE\.snowflake"
          $SNOWFLAKE_CONFIG_PATH = "$SNOWFLAKE_CONFIG_DIR\config.toml"

          Write-Output "SNOWFLAKE_CONFIG_DIR:  $SNOWFLAKE_CONFIG_DIR"
          Write-Output "SNOWFLAKE_CONFIG_PATH: $SNOWFLAKE_CONFIG_PATH"

          New-Item -ItemType Directory -Force -Path $SNOWFLAKE_CONFIG_DIR

          Set-Content -Path $CONFIG_FILE -Value "[connections.myconnection]"
          Add-Content -Path $CONFIG_FILE -Value "authenticator = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_AUTHENTICATOR`""
          Add-Content -Path $CONFIG_FILE -Value "schema = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA`""
          Add-Content -Path $CONFIG_FILE -Value "account = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_ACCOUNT`""
          Add-Content -Path $CONFIG_FILE -Value "user = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_USER`""
          Add-Content -Path $CONFIG_FILE -Value "database = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE`""
          Add-Content -Path $CONFIG_FILE -Value "warehouse = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_WAREHOUSE`""
          Add-Content -Path $CONFIG_FILE -Value "role = `"$env:SNOWFLAKE_CONNECTIONS_MYCONNECTION_ROLE`""
          Add-Content -Path $CONFIG_FILE -Value "private_key_file = `"$PRIVATE_KEY_FILE`""

          Copy-Item -Path $CONFIG_FILE -Destination $SNOWFLAKE_CONFIG_PATH
          icacls $PRIVATE_KEY_FILE /inheritance:r /grant:r "$($env:USERNAME):(R)"
          icacls $SNOWFLAKE_CONFIG_PATH /inheritance:r /grant:r "$($env:USERNAME):(R)"

          Write-Output "Snowflake configuration at $SNOWFLAKE_CONFIG_PATH"
          Get-Content $SNOWFLAKE_CONFIG_PATH

      - name: Test Snowflake CLI
        run: |
          snow --info && snow --version
          snow connection test -c myconnection
          snow sql -q " Select current_organization_name(); select current_account_name();" -c myconnection
          snow connection set-default myconnection
          snow connection list

      - name: Install required tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install ".[development]"
          pip install hatch pyyaml frictionless requests
          pip list
        working-directory: ./snowpark-checkpoints-collector

      - name: Display Host Info
        run: |
          python ../.github/scripts/py_show_host.py
        shell: bash
        working-directory: ./snowpark-checkpoints-collector

      - name: Set PySpark (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $pythonPath = (Get-Command python).Source
          Write-Host "Python Path: $pythonPath"
          echo "PYSPARK_PYTHON=$pythonPath" >> $env:GITHUB_ENV
          echo "PYSPARK_DRIVER_PYTHON=$pythonPath" >> $env:GITHUB_ENV

      - name: Verify PySpark (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python --version
          Write-Host "PYSPARK_PYTHON: $env:PYSPARK_PYTHON"
          Write-Host "PYSPARK_DRIVER_PYTHON: $env:PYSPARK_DRIVER_PYTHON"

      - name: Run tests
        run: |
          echo "Current working directory: $PWD"
          hatch config set dirs.env.virtual .hatch
          hatch status && hatch env show
          hatch run test:check
          hatch run test:coverage
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
          PYTEST_ADDOPTS: --color=yes --tb=short -v
        shell: bash
        working-directory: ./snowpark-checkpoints-collector
