name: Run tests [snowpark_checkpoints_collector] - Linux

on:
  workflow_call:

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: Test ${{ matrix.download_name }}-${{ matrix.python-version }}-${{ matrix.cloud-provider }}
    runs-on: ${{ matrix.os }}
    env:
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_AUTHENTICATOR: SNOWFLAKE_JWT
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_WAREHOUSE: ${{ secrets.SNOWFLAKE_WH }}
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_CONNECTIONS_MYCONNECTION_PRIVATE_KEY_RAW: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_RAW }}
      SNOWPARK_CHECKPOINTS_TELEMETRY_TESTING: "true"
      JAVA_VERSION: "21"

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.9"
            cloud-provider: aws
            snow_cli_version: "2.8.2"
            download_name: linux
          - os: ubuntu-latest
            python-version: "3.10"
            cloud-provider: aws
            snow_cli_version: "3.2.2"
            download_name: linux
          - os: ubuntu-latest
            python-version: "3.11"
            cloud-provider: aws
            snow_cli_version: "3.2.2"
            download_name: linux

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}
          check-latest: true
      - run: java --version

      - name: Generate timestamp and set Schema ID
        run: |
          timestamp=$(date +%Y%m%d%H%M%S%3N)
          echo "timestamp=$timestamp" >> $GITHUB_ENV
          echo "SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID=${{ secrets.SNOWFLAKE_SCHEMA }}_${{ github.run_id }}_${{ github.run_number }}_$timestamp" >> $GITHUB_ENV

      - name: Display Python version
        run: |
          python -c "import sys; print(sys.version)"
          python ../.github/scripts/py_show_env.py
        shell: bash
        working-directory: ./snowpark-checkpoints-collectors

      - name: Set up Snowflake CLI
        uses: Snowflake-Labs/snowflake-cli-action@c2274560296ae95dd86b511d288d4657006235f2
        with:
          cli-version: ${{ matrix.snow_cli_version }}
          default-config-file-path: ".github/config/config.toml"

      - name: Set up key
        run: |
          PARENT_DIR=$(dirname "${{ github.workspace }}")
          PRIVATE_KEY_FILE=$PARENT_DIR/.ssh/key.p8
          echo "PARENT_DIR=$PARENT_DIR" >> $GITHUB_ENV
          echo "PRIVATE_KEY_FILE=$PRIVATE_KEY_FILE" >> $GITHUB_ENV

          mkdir -v $PARENT_DIR/.ssh && ls -la $PARENT_DIR && pwd
          echo "${SNOWFLAKE_CONNECTIONS_MYCONNECTION_PRIVATE_KEY_RAW}" > $PRIVATE_KEY_FILE
          sudo chmod 600 $PRIVATE_KEY_FILE
          file $PRIVATE_KEY_FILE && ls -la $PRIVATE_KEY_FILE

      - name: Set up Connection Snowflake CLI
        shell: bash
        run: |
          PARENT_DIR=$(dirname "${{ github.workspace }}")
          PRIVATE_KEY_FILE=$PARENT_DIR/.ssh/key.p8
          CONFIG_FILE=".github/config/config.toml"
          SNOWFLAKE_CONFIG_DIR="/home/runner/.snowflake"
          SNOWFLAKE_CONFIG_PATH="$SNOWFLAKE_CONFIG_DIR/config.toml"

          mkdir -p "$SNOWFLAKE_CONFIG_DIR"

          echo "[connections.myconnection]" > "$CONFIG_FILE"
          echo "authenticator = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_AUTHENTICATOR\"" >> "$CONFIG_FILE"
          echo "schema = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA\"" >> "$CONFIG_FILE"
          echo "account = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_ACCOUNT\"" >> "$CONFIG_FILE"
          echo "user = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_USER\"" >> "$CONFIG_FILE"
          echo "database = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE\"" >> "$CONFIG_FILE"
          echo "warehouse = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_WAREHOUSE\"" >> "$CONFIG_FILE"
          echo "role = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_ROLE\"" >> "$CONFIG_FILE"
          echo "private_key_file = \"$PRIVATE_KEY_FILE\"" >> "$CONFIG_FILE"

          echo "[connections.integration]" >> "$CONFIG_FILE"
          echo "authenticator = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_AUTHENTICATOR\"" >> "$CONFIG_FILE"
          echo "schema = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID\"" >> "$CONFIG_FILE"
          echo "account = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_ACCOUNT\"" >> "$CONFIG_FILE"
          echo "user = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_USER\"" >> "$CONFIG_FILE"
          echo "database = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE\"" >> "$CONFIG_FILE"
          echo "warehouse = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_WAREHOUSE\"" >> "$CONFIG_FILE"
          echo "role = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_ROLE\"" >> "$CONFIG_FILE"
          echo "private_key_file = \"$PRIVATE_KEY_FILE\"" >> "$CONFIG_FILE"

          cp "$CONFIG_FILE" "$SNOWFLAKE_CONFIG_PATH"
          chmod 600 "$PRIVATE_KEY_FILE"
          chmod 600 "$SNOWFLAKE_CONFIG_PATH"

          echo "Snowflake configuration at $SNOWFLAKE_CONFIG_PATH:"
          cat "$SNOWFLAKE_CONFIG_PATH"
        env:
          SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID: ${{ env.SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID }}

      - name: Set up Default Snowflake CLI
        run: |
          snow --info && snow --version
          snow connection test -c myconnection
          snow connection set-default myconnection
          snow sql -q " Select current_organization_name(); SELECT CURRENT_DATABASE(), CURRENT_SCHEMA();" -c myconnection
          snow connection list

          snow sql -q " CREATE SCHEMA IF NOT EXISTS ${DATABASE}.${SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID} WITH MANAGED ACCESS; " -c myconnection
          snow connection test -c integration
          snow connection set-default integration
          snow connection list
        env:
          DATABASE: "${{ env.SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE }}"
          SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID: ${{ env.SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID }}

      - name: Install required tools
        run: |
          python -m pip install --upgrade pip -q
          python -m pip install ".[development]"
          pip install hatch pyyaml frictionless requests -q
          pip list
        working-directory: ./snowpark-checkpoints-collectors

      - name: Display Host Info
        run: |
          python ../.github/scripts/py_show_host.py
        shell: bash
        working-directory: ./snowpark-checkpoints-collectors

      - name: Set PySpark Environment (Linux)
        run: |
          python_path=$(which python)
          echo "Python Path: $python_path"
          echo "PYSPARK_PYTHON=$python_path" >> $GITHUB_ENV
          echo "PYSPARK_DRIVER_PYTHON=$python_path" >> $GITHUB_ENV
          echo "HATCH_PYTHON=$python_path" >> $GITHUB_ENV
          # Also set for current session
          export PYSPARK_PYTHON="$python_path"
          export PYSPARK_DRIVER_PYTHON="$python_path"
          export HATCH_PYTHON="$python_path"

      - name: Verify PySpark Configuration
        run: |
          python --version
          echo "PYSPARK_PYTHON: $PYSPARK_PYTHON"
          echo "PYSPARK_DRIVER_PYTHON: $PYSPARK_DRIVER_PYTHON"
          echo "HATCH_PYTHON: $HATCH_PYTHON"
          pip list | grep -i pyspark || echo "PySpark not yet installed"

      - name: Run tests
        run: |
          echo "Current working directory: $PWD"
          echo "Python executable being used: $(which python)"
          python --version
          echo "PYSPARK_PYTHON: $PYSPARK_PYTHON"
          echo "PYSPARK_DRIVER_PYTHON: $PYSPARK_DRIVER_PYTHON"
          echo "HATCH_PYTHON: $HATCH_PYTHON"

          # Force hatch to use the correct Python version
          export HATCH_PYTHON="$PYSPARK_PYTHON"

          hatch config set dirs.env.virtual .hatch
          hatch status && hatch env show

          # Get the Python version for hatch matrix
          PYTHON_VERSION="${{ matrix.python-version }}"
          echo "Using Python version: $PYTHON_VERSION"

          # Use hatch with matrix environment directly
          echo "Running tests with Python $PYTHON_VERSION"
          case $PYTHON_VERSION in
            "3.9")
              HATCH_ENV="test_all.py3.9"
              ;;
            "3.10")
              HATCH_ENV="test_all.py3.10"
              ;;
            "3.11")
              HATCH_ENV="test_all.py3.11"
              ;;
            *)
              HATCH_ENV="test"
              ;;
          esac

          echo "Using hatch environment: $HATCH_ENV"
          hatch run $HATCH_ENV:check
          hatch run $HATCH_ENV:coverage
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
          PYTEST_ADDOPTS: --color=yes --tb=short -v
        shell: bash
        working-directory: ./snowpark-checkpoints-collectors

      - name: Snowflake Schema Cleanup
        if: always()
        shell: bash
        run: |
          if [ -n "${SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID}" ]; then
            snow sql -q "DROP SCHEMA IF EXISTS ${SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID} CASCADE;" -c myconnection
          fi
        env:
          SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID: ${{ env.SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA_ID }}
