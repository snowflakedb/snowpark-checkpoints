name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: write
  id-token: write

env:
  PYTHON_VERSION: "3.11"

jobs:
  deploy:
    name: Deploy Packages
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip -q
          pip install requests pytest build twine sigstore hatch -q
          pip list
        shell: bash
        working-directory: ${{ github.workspace }}

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update Version [snowpark-checkpoints]
        run: |
          echo "Current directory: $PWD" && ls -la
          echo "NEW_VERSION=${NEW_VERSION}"
          echo "FILE_VERSION=${FILE_VERSION}"
          sed -i "s/^__version__ = \".*\"/__version__ = \"${NEW_VERSION}\"/" ${FILE_VERSION}
          echo "Package Version updated:" && cat ${FILE_VERSION}
        env:
          FILE_VERSION: __version__.py
          NEW_VERSION: ${{ steps.get_version.outputs.version }}
        working-directory: ${{ github.workspace }}

      - name: Update Version [snowpark-configuration]
        run: |
          echo "Current directory: $PWD" && ls -la
          sed -i "s/^__version__ = \".*\"/__version__ = \"${NEW_VERSION}\"/" ${FILE_VERSION}
          echo "Package Version updated:" && cat ${FILE_VERSION}
        env:
          NEW_VERSION: ${{ steps.get_version.outputs.version }}
          FILE_VERSION: ../snowpark-checkpoints-configuration/__version__.py
        working-directory: ./snowpark-checkpoints-configuration

      - name: Update Version [snowpark-checkpoints-hypothesis]
        run: |
          sed -i "s/^__version__ = \".*\"/__version__ = \"${NEW_VERSION}\"/" ${FILE_VERSION}
          echo "Package Version updated:" && cat ${FILE_VERSION}
        env:
          NEW_VERSION: ${{ steps.get_version.outputs.version }}
          FILE_VERSION: ../snowpark-checkpoints-hypothesis/__version__.py
        working-directory: ./snowpark-checkpoints-hypothesis

      - name: Update Version [snowpark-checkpoints-validators]
        run: |
          sed -i "s/^__version__ = \".*\"/__version__ = \"${NEW_VERSION}\"/" ${FILE_VERSION}
          echo "Package Version updated:" && cat ${FILE_VERSION}
        env:
          NEW_VERSION: ${{ steps.get_version.outputs.version }}
          FILE_VERSION: ../snowpark-checkpoints-validators/__version__.py
        working-directory: ./snowpark-checkpoints-validators

      - name: Update Version [snowpark-checkpoints-collector]
        run: |
          sed -i "s/^__version__ = \".*\"/__version__ = \"${NEW_VERSION}\"/" ${FILE_VERSION}
          echo "Package Version updated:" && cat ${FILE_VERSION}
        env:
          NEW_VERSION: ${{ steps.get_version.outputs.version }}
          FILE_VERSION: ../snowpark-checkpoints-collectors/__version__.py
        working-directory: ./snowpark-checkpoints-collectors

      - name: Generate Package [snowpark-checkpoints]
        run: |
          hatch build
          echo "Current directory: $PWD" && ls -la dist
        working-directory: ${{ github.workspace }}

      - name: Generate Package [snowpark-configuration]
        run: |
          hatch build
          echo "Current directory: $PWD" && ls -la dist
        working-directory: ./snowpark-checkpoints-configuration

      - name: Generate Package [snowpark-checkpoints-hypothesis]
        run: |
          hatch build
          echo "Current directory: $PWD" && ls -la dist
        working-directory: ./snowpark-checkpoints-hypothesis

      - name: Generate Package [snowpark-checkpoints-validators]
        run: |
          hatch build
          echo "Current directory: $PWD" && ls -la dist
        working-directory: ./snowpark-checkpoints-validators

      - name: Generate Package [snowpark-checkpoints-collector]
        run: |
          hatch build
          echo "Current directory: $PWD" && ls -la dist
        working-directory: ./snowpark-checkpoints-collectors

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: py-artifacts
          path: |
            ./dist/*
            ./**/dist/*

  publish:
    name: Publish Packages PyPI
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: py-artifacts
          path: ./dist

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install twine
          pip list --verbose

      - name: Get directory structure
        run: |
          echo "Current directory: $(pwd)" && ls -la
          echo "Content recursive of dist directory:"
          ls -laR dist/
        working-directory: ${{ github.workspace }}

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
          TWINE_VERBOSE: 1
        run: |
          echo "Checking distributions..."
          ls -la
          echo "Uploading to PyPI..."
          find . -name "*.whl" -o -name "*.tar.gz" | xargs twine upload --verbose
        working-directory: ./dist
