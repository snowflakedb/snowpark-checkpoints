name: Release Snowpark Checkpoints

on:
  release:
    types: [published]

permissions:
  contents: write
  id-token: write
  pull-requests: write

env:
  PYTHON_VERSION: "3.11"
  TWINE_VERSION: "6.0.1"

jobs:
  deploy:
    name: Deploy Packages
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip -q
          pip install requests pytest build twine sigstore hatch -q
          pip list
        shell: bash
        working-directory: ${{ github.workspace }}

      - name: Get version from tag
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#v}
            echo "version=$VERSION"
          else
            VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
            VERSION=${VERSION#v}
            echo "version=$VERSION"
          fi

          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(rc[0-9]+)?$ ]]; then
            echo "version=$VERSION"
            echo "Error: No version found"
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update Version [snowpark-checkpoints]
        run: |
          set -e
          echo "Current directory: $PWD" && ls -la
          echo "NEW_VERSION=${NEW_VERSION}"
          echo "FILE_NAME=${FILE_NAME}"
          sed -i "s/^__version__ = \".*\"/__version__ = \"${NEW_VERSION}\"/" ${FILE_NAME}
          echo "Package Version updated:" && cat ${FILE_NAME}
        env:
          FILE_NAME: __version__.py
          NEW_VERSION: ${{ steps.get_version.outputs.version }}
        working-directory: ${{ github.workspace }}

      - name: Update Version [snowpark-configuration]
        run: |
          set -e
          echo "Current directory: $PWD" && ls -l
          echo "Updating pip file ${FILE_NAME} with version: ${NEW_VERSION}"
          find $(pwd) -name "${FILE_NAME}" -exec sed -i "s/^__version__ = \".*\"/__version__ = \"${NEW_VERSION}\"/" {} \;
          echo "Package Version updated:" && cat $(find . -name "${FILE_NAME}")
        env:
          NEW_VERSION: ${{ steps.get_version.outputs.version }}
          FILE_NAME: __version__.py
        working-directory: ./snowpark-checkpoints-configuration

      - name: Update Version [snowpark-checkpoints-hypothesis]
        run: |
          set -e
          echo "Current directory: $PWD" && ls -l
          echo "Updating pip file ${FILE_NAME} with version: ${NEW_VERSION}"
          find $(pwd) -name "${FILE_NAME}" -exec sed -i "s/^__version__ = \".*\"/__version__ = \"${NEW_VERSION}\"/" {} \;
          echo "Package Version updated:" && cat $(find . -name "${FILE_NAME}")
        env:
          NEW_VERSION: ${{ steps.get_version.outputs.version }}
          FILE_NAME: __version__.py
        working-directory: ./snowpark-checkpoints-hypothesis

      - name: Update Version [snowpark-checkpoints-validators]
        run: |
          set -e
          echo "Current directory: $PWD" && ls -l
          echo "Updating pip file ${FILE_NAME} with version: ${NEW_VERSION}"
          find $(pwd) -name "${FILE_NAME}" -exec sed -i "s/^__version__ = \".*\"/__version__ = \"${NEW_VERSION}\"/" {} \;
          echo "Package Version updated:" && cat $(find . -name "${FILE_NAME}")
        env:
          NEW_VERSION: ${{ steps.get_version.outputs.version }}
          FILE_NAME: __version__.py
        working-directory: ./snowpark-checkpoints-validators

      - name: Update Version [snowpark-checkpoints-collector]
        run: |
          set -e
          echo "Current directory: $PWD" && ls -l
          echo "Updating pip file ${FILE_NAME} with version: ${NEW_VERSION}"
          find $(pwd) -name "${FILE_NAME}" -exec sed -i "s/^__version__ = \".*\"/__version__ = \"${NEW_VERSION}\"/" {} \;
          echo "Package Version updated:" && cat $(find . -name "${FILE_NAME}")
        env:
          NEW_VERSION: ${{ steps.get_version.outputs.version }}
          FILE_NAME: __version__.py
        working-directory: ./snowpark-checkpoints-collectors

      - name: Generate Package [snowpark-checkpoints]
        run: |
          hatch build
          echo "Current directory: $PWD" && ls -la dist
        working-directory: ${{ github.workspace }}

      - name: Generate Package [snowpark-configuration]
        run: |
          hatch build
          echo "Current directory: $PWD" && ls -la dist
        working-directory: ./snowpark-checkpoints-configuration

      - name: Generate Package [snowpark-checkpoints-hypothesis]
        run: |
          hatch build
          echo "Current directory: $PWD" && ls -la dist
        working-directory: ./snowpark-checkpoints-hypothesis

      - name: Generate Package [snowpark-checkpoints-validators]
        run: |
          hatch build
          echo "Current directory: $PWD" && ls -la dist
        working-directory: ./snowpark-checkpoints-validators

      - name: Generate Package [snowpark-checkpoints-collector]
        run: |
          hatch build
          echo "Current directory: $PWD" && ls -la dist
        working-directory: ./snowpark-checkpoints-collectors

      - name: Get Workflow File Name
        id: get_workflow_file
        run: |
          WORKFLOW_NAME="${{ github.workflow }}"
          WORKFLOW_FILE=$(grep -rl "name: ${WORKFLOW_NAME}" .github/workflows/*.yml)
          echo "Workflow file: ${WORKFLOW_FILE}"
          echo "workflow_file=${WORKFLOW_FILE}" >> $GITHUB_ENV

      - name: Sign and Verify Packages
        run: |
          echo "The workflow file is: ${{ env.workflow_file }}"
          echo "Full URL: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/${{ env.workflow_file }}@${GITHUB_REF}"

          for dist in $(find . -type f -name "*.whl" -o -name "*.tar.gz"); do
            dist_base="$(basename "${dist}")"
            echo "Processing: ${dist}"
            echo "dist_base: ${dist_base}"

            echo "Sign using sigstore"
            python -m \
              sigstore sign "${dist}" \
              --output-signature "${dist_base}.sig" \
              --output-certificate "${dist_base}.crt" \
              --bundle "${dist_base}.sigstore"

            echo "Verify using .sig and .crt pair"
            python -m \
              sigstore verify identity "${dist}" \
              --signature "${dist_base}.sig" \
              --cert "${dist_base}.crt" \
              --cert-oidc-issuer https://token.actions.githubusercontent.com \
              --cert-identity "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/${{ env.workflow_file }}@${GITHUB_REF}"

            echo "Verify using .sigstore bundle"
            python -m \
              sigstore verify identity "${dist}" \
              --bundle "${dist_base}.sigstore" \
              --cert-oidc-issuer https://token.actions.githubusercontent.com \
              --cert-identity "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/${{ env.workflow_file }}@${GITHUB_REF}"
          done
        working-directory: ${{ github.workspace }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: py-artifacts_v${{ steps.get_version.outputs.version }}
          path: |
            ./dist/*
            ./**/dist/*

  publish:
    name: Publish Packages PyPI
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: py-artifacts_v${{ needs.deploy.outputs.version }}
          path: ./dist

      - name: Get directory structure
        run: |
          echo "Current directory: $(pwd)" && ls -la dist
          echo "Directory structure: $(find . -type f -name "*.whl" -o -name "*.tar.gz")"
        working-directory: ${{ github.workspace }}

      - name: Upload Packages to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in $(find . -type f -name "*.whl" -o -name "*.tar.gz"); do
            echo "Uploading $file..."
            gh release upload "${GITHUB_REF#refs/tags/}" "$file"
          done
        working-directory: ./dist

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install twine==$TWINE_VERSION -q
          pip list --verbose
        env:
          TWINE_VERSION: "${{ env.TWINE_VERSION }}"

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
          TWINE_VERBOSE: 1
        run: |
          echo "Checking distributions..."
          ls -la
          echo "Uploading to PyPI..."
          find . -name "*.whl" -o -name "*.tar.gz" | xargs twine upload --verbose
        working-directory: ./dist
